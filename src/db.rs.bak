pub(crate) async fn insert_message(
    db_pool: &sqlx::Pool<sqlx::MySql>,
    header: &crate::models::models::Header,
    body: Option<&crate::models::models::Body>,
    data_type:&str
) {
    match body {
        Some(body)=>{
            let _row = sqlx::query(
                r#"INSERT INTO message_receive 
                (message_id, device_id, channel_no, `type`, message_time, body, data_type) VALUES(?, ?, ?, ?, ?, ?, ?)
                RETURNING id, message_id, device_id, channel_no, type
                "#,
                header.get_message_id(),
                header.get_device_id(),
                header.get_channel_no(),
                header.get_type(),
                header.get_message_time(),
                serde_json::to_string(body).unwrap(),
                data_type
        
            )
            .fetch_one(db_pool)
            .await
            .unwrap();
        }
        None=>{}
    }
}

pub(crate) async fn insert_image_url(db_pool: &sqlx::Pool<sqlx::MySql>, msg_id: &str, channel_name: &str, url: &str, data_type: &str){
    let _row = sqlx::query(
        r#"INSERT INTO message_img 
        (message_id, channel_name, url, `data_type`) VALUES(?, ?, ?, ?)
        RETURNING message_id, channel_name, url, data_type,id
        "#,
        msg_id,
        channel_name,
        url,
        data_type
    )
    .fetch_one(db_pool)
    .await
    .unwrap();
}

pub(crate) async fn get_db_pool() -> sqlx::Pool<sqlx::MySql> {
    let database_url = std::env::var("DATABASE_URL").expect("DATABASE_URL 没有在 .env 文件里设置");
    sqlx::MySqlPool::connect(&database_url)
        .await
        .expect("Failed to connect to database")
}